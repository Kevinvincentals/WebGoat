@model CheckoutViewModel

@{
    ViewData["Title"] = "Checkout";
    const decimal dkkRate = 7.5m;
    const decimal standardShipping = 20.0m;
}

<h1>
    Check Out
</h1>
@Html.ValidationSummary()
@if (ViewData.ModelState.IsValid)
{
    <partial name="_CartPartial" model=@Model.Cart/>
}
@using (Html.BeginForm(FormMethod.Post, new { id = "payment-form" }))
{
    <fieldset title="Where shall we ship this?">
        <legend>Where shall we ship this?</legend>
        @Html.LabelFor(m => m.ShipTarget)
        @Html.TextBoxFor(m => m.ShipTarget, new { @maxlength = 40 })
        @Html.ValidationMessageFor(m => m.ShipTarget)
        <br>
        @Html.LabelFor(m => m.Email)
        @Html.TextBoxFor(m => m.Email, new { @maxlength = 100 })
        @Html.ValidationMessageFor(m => m.Email)
        <br>
        @Html.LabelFor(m => m.Address)
        @Html.TextBoxFor(m => m.Address, new { @maxlength = 60 })
        @Html.ValidationMessageFor(m => m.Address)
        <br>
        @Html.LabelFor(m => m.City)
        @Html.TextBoxFor(m => m.City, new { @maxlength = 15 })
        @Html.ValidationMessageFor(m => m.City)
        <br>
        @Html.LabelFor(m => m.Region)
        @Html.TextBoxFor(m => m.Region, new { @maxlength = 15 })
        @Html.ValidationMessageFor(m => m.Region)
        <br>
        @Html.LabelFor(m => m.PostalCode)
        @Html.TextBoxFor(m => m.PostalCode, new { @maxlength = 10 })
        @Html.ValidationMessageFor(m => m.PostalCode)
        <br>
        @Html.LabelFor(m => m.Country)
        @Html.TextBoxFor(m => m.Country, new { @maxlength = 15 })
        @Html.ValidationMessageFor(m => m.Country)
    </fieldset>
    <div class="price-summary">
        <h3>Price Summary (DKK)</h3>
        @if (Model.Cart?.OrderDetails != null)
        {
            @foreach (var item in Model.Cart.OrderDetails.Values)
            {
                <div class="item-price">
                    <span>@item.Product.ProductName</span>
                    <span>@((Convert.ToDecimal(item.UnitPrice) * dkkRate).ToString("F2")) kr.</span>
                </div>
            }
            
            <div class="shipping-cost">
                <span>Standard Shipping</span>
                <span>@((standardShipping * dkkRate).ToString("F2")) kr.</span>
            </div>
            
            <div class="total-price">
                <strong>Total</strong>
                <strong>@((Convert.ToDecimal(Model.Cart.SubTotal + standardShipping) * dkkRate).ToString("F2")) kr.</strong>
            </div>
        }
    </div>
    <button type="submit" id="checkout-button" class="btn btn-primary">
        Proceed to Payment
    </button>
}

@section Scripts {
    <!-- Load Stripe.js -->
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        // Initialize Stripe with public key
        const stripe = Stripe('@ViewData["StripePublicKey"]');
        const form = document.getElementById('payment-form');
        
        form.addEventListener('submit', async function(event) {
            event.preventDefault();
            
            // Collect form data
            const formData = Array.from(new FormData(form)).reduce((acc, [key, value]) => {
                acc[key] = value;
                return acc;
            }, {});
            
            try {
                // Send shipping details to server
                const response = await fetch('/Checkout/Checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        shipTarget: formData.ShipTarget,
                        email: formData.Email,
                        address: formData.Address,
                        city: formData.City,
                        region: formData.Region,
                        postalCode: formData.PostalCode,
                        country: formData.Country
                    })
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('Server error:', errorData);
                    return;
                }
                
                const data = await response.json();
                
                if (data.error) {
                    console.error('Error:', data.error);
                    return;
                }
                
                // Redirect to Stripe Checkout page
                const result = await stripe.redirectToCheckout({
                    sessionId: data.sessionId
                });
                
                if (result.error) {
                    console.error('Stripe error:', result.error);
                }
            } catch (error) {
                console.error('Error:', error);
            }
        });
    </script>
}